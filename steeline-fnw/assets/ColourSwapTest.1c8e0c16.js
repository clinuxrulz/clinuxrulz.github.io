import{o as F,l as X,i as p,b as _,M as j,d as J,c as O,e as M,s as P,I as L,g as Y,f as Z,t as $,F as ee,u as B}from"./index.5aba22ff.js";const te=$('<div style="flex-grow: 1; display: flex; flex-direction: column; overflow: scroll;"><div><h2>Colour Swap Test</h2><br></div></div>'),H=$("<br>"),re=$('<input type="file">'),ne=$("<img>"),le=$("<table><thead><tr><th>Colour</th><th>Filename</th><th></th></tr></thead><tbody><tr><td></td></tr></tbody></table>"),ae=$('<tr><td></td><td><input type="text">.png</td><td><button class="btn btn-primary">Download</button></td></tr>'),oe=$('<table><thead></thead><tbody><tr><td style="border: none;"><div></div></td><td style="border: none;"><h3></h3></td></tr></tbody></table>'),ie=$('<canvas style="border: 1px solid;"></canvas>'),U=[{name:"Basalt",r:108,g:108,b:110},{name:"Bushland",r:132,g:132,b:120},{name:"Classic Cream",r:232,g:219,b:173},{name:"Cottage Green",r:49,g:76,b:60},{name:"Deep Ocean",r:54,g:65,b:82},{name:"Dune",r:177,g:174,b:163},{name:"Evening Haze",r:197,g:194,b:170},{name:"Harvest",r:202,g:179,b:139},{name:"Iron Stone",r:62,g:67,b:76},{name:"Jasper",r:109,g:97,b:83},{name:"Monument",r:50,g:50,b:50},{name:"Manor Red",r:94,g:28,b:14},{name:"Night Sky",r:25,g:25,b:25},{name:"Paper Bark",r:202,g:190,b:165},{name:"Pale Eucalypt",r:124,g:132,b:107},{name:"Riversand",r:158,g:141,b:119},{name:"Shale Grey",r:188,g:191,b:186},{name:"Surfmist",r:228,g:225,b:213},{name:"Wallaby",r:128,g:124,b:121},{name:"Woodland Grey",r:75,g:76,b:68},{name:"Wilderness",r:101,g:113,b:95},{name:"Windspray",r:137,g:139,b:139}],me=l=>{F(()=>{document.title="Tool Box - Colour Swap Test"});const[i,g]=X(void 0),C=s=>{let u=new FileReader;u.onload=()=>{let e=u.result;g(e)},u.readAsDataURL(s)};return(()=>{const s=te.cloneNode(!0),u=s.firstChild;return u.firstChild.nextSibling,p(u,_(J,{get fallback(){return["Upload an image of a manor red object to generate the other colours for:",H.cloneNode(!0),(()=>{const n=re.cloneNode(!0);return n.addEventListener("change",t=>{let r=t.target.files;if(r==null||r.length==0)return;let a=r[0];C(a)}),n})(),H.cloneNode(!0)]},get children(){return _(j,{get when(){return i()!=null},get children(){return _(de,{get imgSrc(){return i()}})}})}}),null),s})()},de=l=>{let i,[g,C]=O({showTransformedColours:!1,results:[]}),s=(e,n)=>{C("results",[...g.results,{name:e,canvas:n}])},u=async(e,n)=>{let t=g.results.find(a=>a.name==e);if(t==null)return;let d=t;const r=await new Promise(a=>d.canvas.toBlob(a,"image/png"));r!=null&&ee.saveAs(r,n+".png")};return F(()=>{setTimeout(()=>{C("showTransformedColours",!0)})}),[(()=>{const e=ne.cloneNode(!0),n=i;return typeof n=="function"?B(n,e):i=e,M(()=>P(e,"src",l.imgSrc)),e})(),H.cloneNode(!0),_(J,{get children(){return _(j,{get when(){return g.showTransformedColours},get children(){return[(()=>{const e=le.cloneNode(!0),n=e.firstChild,t=n.nextSibling,d=t.firstChild;return p(t,_(L,{each:U,children:(r,a)=>{let c;return(()=>{const y=ae.cloneNode(!0),o=y.firstChild,h=o.nextSibling,m=h.firstChild,f=h.nextSibling,w=f.firstChild;p(o,()=>r().name);const v=c;return typeof v=="function"?B(v,m):c=m,m.value=a,w.$$click=()=>u(r().name,c?.value??r().name),M(()=>w.disabled=g.results.findIndex(x=>x.name==r().name)==-1),y})()}}),d),e})(),_(L,{each:U,children:e=>_(se,{imgElement:i,get targetColour(){return e()},storeResult:s})})]}})}})]},se=l=>{let i;if(l.imgElement==null)return[];const[g,C]=O({canvasWidth:400,canvasHeight:300}),s={r:94,g:28,b:14},u=()=>{if(l.imgElement==null||i==null)return;let e=i.getContext("2d");if(e==null)return;e.drawImage(l.imgElement,0,0);const n=e.getImageData(0,0,i.width,i.height),t=n.data;let d=[s.r,s.g,s.b],r=[l.targetColour.r,l.targetColour.g,l.targetColour.b],a=d[0],c=d[1],y=d[2];for(let o=0;o<t.length;o+=4){if(t[o+4]==0)continue;let h=255-t[o],m=255-t[o+1],f=255-t[o+2],w=a*h+c*m+y*f,v=h*h+m*m+f*f,x=w/v,E=a-h*x,I=c-m*x,N=y-f*x,K=0-255-h*((0-255)*h/v),Q=0-255-m*((0-255)*m/v),V=0-255-f*((0-255)*f/v),b=-(E*K+I*Q+N*V)/(E*E+I*I+N*N),q=a*b,A=c*b,G=f*b,R=255-q,T=255-A,z=255-G,S=((t[o]-q)*R+(t[o+1]-A)*T+(t[o+2]-G)*z)/(R*R+T*T+z*z);b=Math.max(0,Math.min(1,b)),S=Math.max(0,Math.min(1,S));let D=r[0]*b,W=r[1]*b,k=r[2]*b;D+=(255-D)*S,W+=(255-W)*S,k+=(255-k)*S,t[o]=Math.max(0,Math.min(255,Math.round(D))),t[o+1]=Math.max(0,Math.min(255,Math.round(W))),t[o+2]=Math.max(0,Math.min(255,Math.round(k)))}e.putImageData(n,0,0),l.storeResult(l.targetColour.name,i)};return F(()=>{Y(()=>{l.imgElement!=null&&(C("canvasWidth",l.imgElement.width),C("canvasHeight",l.imgElement.height))}),setTimeout(()=>u())}),[(()=>{const e=oe.cloneNode(!0),n=e.firstChild,t=n.nextSibling,d=t.firstChild,r=d.firstChild,a=r.firstChild,c=r.nextSibling,y=c.firstChild;return a.style.setProperty("width","32px"),a.style.setProperty("height","32px"),p(y,()=>l.targetColour.name),M(()=>a.style.setProperty("background","rgb("+l.targetColour.r+","+l.targetColour.g+","+l.targetColour.b+")")),e})(),(()=>{const e=ie.cloneNode(!0),n=i;return typeof n=="function"?B(n,e):i=e,M(t=>{const d=g.canvasWidth,r=g.canvasHeight;return d!==t._v$&&P(e,"width",t._v$=d),r!==t._v$2&&P(e,"height",t._v$2=r),t},{_v$:void 0,_v$2:void 0}),e})()]};Z(["click"]);export{me as default};
